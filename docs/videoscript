Order of files described: patient.h, patient.cpp, appointment.h, appointment.cpp, medicalstaff.h, medicalstaff.cpp, procedure.h, procedure.cpp, exceptions.h, exceptions.cpp, userinterfaceg1.cpp
Our `patient.h` file serves as the declaration file for the Patient class. It includes necessary header files such as `<iostream>`, `<string>`, and others. Within this file, we declare member variables representing patient information such as name, age, gender, etc. Additionally, member functions such as constructors, destructors, accessors, setters, and other member functions are declared here. We also include a forward declaration of the Appointment class to avoid circular dependencies.

In our `patient.cpp` file, we implement the member functions declared in `patient.h`. Here, we define constructor and destructor implementations, as well as accessors and setters to get and set patient attributes. Member functions like `displayInfo()`, `addAppointment()`, `displayAppointments()`, and `searchById()` are also implemented in this file. Together, these files define the behavior and properties of the Patient class, with `patient.cpp` providing the implementation details for the functions declared in `patient.h`.
Moving on to our `appointment.h` file, it contains the declaration of the Appointment class along with necessary header files such as `<iostream>`, `<string>`, and others. We include a forward declaration of the Patient class to avoid circular dependencies. Within this file, member variables representing appointment information such as patient name, ID, medical staff, appointment time, procedures, and cancellation status are declared. Member functions like constructors, destructors, accessors, and setters are also declared for managing appointment information. Additionally, functions like `appointmentSchedule()`, `cancelAppointment()`, and `appointmentCancel()` are declared for managing appointment scheduling and cancellation.
In our `appointment.cpp` file, we implement the member functions declared in `appointment.h`. Here, we define constructor and destructor implementations, as well as accessors and setters to get and set appointment attributes. Functions like `appointmentSchedule()`, `rescheduleAppointment()`, and `cancelAppointment()` are also implemented in this file to manage appointment scheduling and cancellation. Together, these files define the behavior and properties of the Appointment class, with `appointment.cpp` providing the implementation details for the functions declared in `appointment.h`.
Moving forward to our `medicalstaff.h` file, it contains the declaration of the MedicalStaff, Doctor, Nurse, and MedicalStaffManager classes, along with necessary header files such as `<string>`, `<vector>`, and others. We include a forward declaration of the Appointment class to avoid circular dependencies. Within this file, member variables representing medical staff information such as name, specialization, availability, employee ID, and associated procedures are declared. Member functions like constructors, destructors, display information, and utility functions for managing medical staff are also declared.
In our `medicalstaff.cpp` file, we implement the member functions declared in `medicalstaff.h`. Here, we define constructor and destructor implementations for the MedicalStaff, Doctor, and Nurse classes. Member functions to display information, check availability, get procedures, add procedures, and set appointments for medical staff are implemented here. Additionally, the MedicalStaffManager class implementation includes static methods to assign and find medical staff based on specialization. Together, these files define the behavior and properties of the medical staff classes (MedicalStaff, Doctor, and Nurse) and the manager class (MedicalStaffManager), with `medicalstaff.cpp` providing the implementation details for the functions declared in `medicalstaff.h`.
Moving on to our `procedure.h` file, it contains the declaration of the Procedure class along with necessary header files such as `<string>` and `<vector>`. The Procedure class represents a medical procedure with attributes such as name and description. Constructor, getter methods (`getName()` and `getDescription()`), and setter methods (`setName()` and `setDescription()`) are declared for managing procedure attributes.
In our `procedure.cpp` file, we implement the member functions declared in `procedure.h`. Here, we define constructor and getter/setter method implementations for the Procedure class. Additionally, it includes a function `initializeProcedureList()` that initializes and returns a map of procedures categorized by specialization for doctors and nurses. This function initializes a map of procedures categorized by medical staff specialization, populating the map with predefined procedures for different specializations such as Emergency Physician, Pulmonologist, Gastroenterologist, etc., for both doctors and nurses. Together, these files provide a way to organize and manage medical procedures within the system.
Our `exceptions.h` file defines several exception classes such as `BaseException`, `InvalidAgeException`, `AppointmentConflictException`, `InvalidNameException`, `InvalidIDException`, `GenderException`, `PhoneNumberException`, `FieldNotEmptyException`, `BoolMustBeSetException`, and `InvalidAppointmentTimeFormat`. Each exception class has static methods for handling specific error conditions related to age, appointment conflicts, names, IDs, gender, phone numbers, fields not being empty, boolean flags, and appointment time formats. Additionally, it provides a declaration for the `confirmationException` function, which is used for confirming information with the user.
In our `exceptions.cpp` file, we implement the functionality of the exception classes and utility functions declared in `exceptions.h`. Here, we define the logic for checking the validity of age, names, IDs, gender, phone numbers, and other data types. We handle error reporting by throwing appropriate exceptions and displaying error messages. Additionally, we provide confirmation prompts for validating user inputs. Overall, these files help ensure robust error handling and user input validation within our program, enhancing its reliability and usability. 
Our `main.cpp` and is the central hub of our hospital management system, coordinating user interactions and integrating various functionalities provided by other modules. Let's break down its design and highlight its features:

Integration with Other Files:
1. **Header File Inclusion**: We include necessary standard library headers (`iostream`, `vector`, `string`, etc.) and headers for user-defined classes (`exceptions.h`, `medicalStaff.h`, `procedure.h`, `patient.h`, `appointment.h`).
2. **Function Prototypes**: We declare function prototypes for functions defined later in the file and implemented in other files. These prototypes ensure that functions can be called before their definitions.
3. **Function Definitions**: We define functions such as `displayMenu`, `userInput`, and utility functions like `searchPatientById`, `isValidAppointmentTimeFormat`, `and `displayBookedAppointments`. These functions handle user input, display menus, and interact with other modules to perform tasks like adding patients, scheduling appointments, and displaying information.
4. **Main Function**: In our `main` function, we initialize lists for appointments and patients, then call the `userInput` function to start the interactive menu-driven interface. This function acts as the entry point of the program, orchestrating the flow of control and ensuring the smooth execution of the hospital management system.
Design Choices and Highlights:
1. **Modularization**: Our code is well-structured and modular, with functionalities separated into different modules (files) like `exceptions.h`, `medicalStaff.h`, etc. This modular design promotes code organization, reusability, and maintainability.
2. **Exception Handling**: We implement robust exception handling using custom exception classes defined in `exceptions.h`. This ensures that errors and exceptional conditions are properly handled, enhancing the reliability and robustness of our system.
3. **Object-Oriented Design**: We leverage object-oriented principles by defining classes like `Patient`, `Appointment`, and `MedicalStaff`, encapsulating data and behavior within these classes. This promotes code clarity, encapsulation, and code reuse.
4. **Input Validation**: User inputs are validated using exception handling and custom validation functions (`isValidAppointmentTimeFormat`). This ensures data integrity and prevents invalid inputs, enhancing the reliability of our system.
5. **STL Integration**: We utilize Standard Library containers like `list` and `vector` for managing collections of appointments, patients, etc. This leverages the functionality provided by the STL, improving code efficiency and readability.
6. **Memory Management**: Smart pointers (`unique_ptr`) are used to manage dynamically allocated objects like `Patient`, ensuring proper memory management and reducing the risk of memory leaks.

7. **User Interaction**: The interactive menu-driven interface (`displayMenu`, `userInput`) enables users to interact with the system easily, providing options to perform various tasks like adding patients, scheduling appointments, etc.
8. **Error Reporting**: Informative error messages are provided to users in case of invalid inputs or errors, guiding them on how to correct the issues and interact effectively with the system.

Overall, our `main.cpp`integrates the program altogether and demonstrates a structured, functional, albeit simplified hospital management system, with a focus on modularity, exception handling, and user interaction.
